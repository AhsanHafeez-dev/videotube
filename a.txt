User Router and Controller Setup
the video was introduction to controllers it does not goes into the details of logics of registration it just covers the syntax and convention part means it declare how controllers file will be created their naming convention how we will use custom asynchHandler function for controller we send dumy 200 response because we have not done logic part yet than we exported it and moves towards routers folder because somehow we need to tell our app to navigate our user to our function when he wants to register so we imported router from express and created a router in user router.js then we move to app.js imports our router with custom name (export default is neccessary) user router and use it as middleware in app but when using that wwe need to tell app which base routes will it handle in our case user route will hander users routes like regsiter delete login update etc so /user will be forwarded to user routes which will route to controller but in standard we typically have more verbose urls like we also starts with /api and we also use versioning in apis for tracking each features in version so route will become /api/v1 as it is first version of it and after that as currently we are talking about user routes we will also add /user so overall url will become /api/v1/users be carefull with your import statements because some time exetensions are also necccesarry once you are done with app setup now go ahead and define routes using router in user.routes.js first route would be of post type which will be handled by registerUser controller now run application by typing npm run dev in cmd and test route with postman see for errors this is not the proper controller we will write the proper logic of registering user next time
User Controller logic
the video starts with some discussion that controller is actually programming practices for problems solving and leet code or dsa is not the only source for learning logic building many students learn data structures and algorithims ,algorithim is just step by step process to solve a problems so either you learn it by using leetcode problems or by writting conntroller both are same purpose is same so we started by writting step by step algorithim for registering user the first step was to take all info(this depends upon specifc use case) ,validate all fields,check wether that user already exist or not take the avatar(profile) and coverImage from user and upload them on some third party cloud(cloudinary for us) if avatar is uploaded successfully make a db call to save the user and return tha user information to frontend for now we dont have frontend we will use postman (you can use thunderclient or axios as well) . so after brainstroming we started writting code and we first takes all text fields from req.body and print them on console and after that we see its even accepting the empty string so we introduce validation checks(for proper complicated checks creat a utility files with all validation i.e email,password etc checks) to accepts only valid fields we did it in both way tradiotional if way and by using .some method of javascript arrays incase of invalid fields we use our custom api error to send error back to frontend if all fields are valid then we make db query(remeber to use await) to check if this user exist in db or not for now we are checking for both unique values username and email in one call you can check for one or more than two depending upon the use case then we move towards image and realizes that we dont have files  by default in express so we need something which can accept and inject files in our req object so we already had multer middleware so go to user.routes.js and that upload of multer in our register user we uses upload.fields because we were accepting two files and we name them and describe we will only accepts one file against each fields now multer will inject files in our req object so we can use it in controller we came in controller and acces req.files and . name of file [0]index because we are only accepting one file against each fields and same goes for coverImage as avatar is compulsory we check that it should exist otherwise error is thrown after that call utility function to upload images to url and get response back again check wether avatar response is not null because its compulsory and throw error if found null after that make db creation call to save user to db and get response back than make another db query(completely option you can use reponse as well) and tell db that you dont want that encrypted password and empty refrehToken also make sures to send only avatar.url not whole avatar object and also provide option || "" for coverImage as it is not compulsory after all that is done and db give appropiate response if not throw error if yes return properly formatted response using custom ApiResponse class send 201 created code give user data and also success message and we will test controller next time.

How to Use Postman and testing register user controller
the video started with the discussion that whenever you are starting to test your code you should always have real world expectation that your code will fail and you will have erros because the real world algorithim involves much complexity and diverse aspect that you cannot get all things right in first go you will fix bugs in many iteration and that is where you learn and go from junior to senior software developer can write simple algorithims in one go but not the real world application then sir discussed one of the bug that one of viewer point out that sir has written ./env instead of ./.env in dotenv cofig in index.js then he moves towards the testing of register conntroller in first attempt he got error that field user with this username or email already exists then he analyze code and realized that he misses the await when checking for user existance he fix that and then tried again stating field fullName is required but the code failed again he spend some time looking for erro but he didnot get it actually he was missing l in fullName he was writting fulName instead of fullName and thats why it doesnot get match to code's variable fullName anyways he deletes the field and rewrite field again with correct spelling and this time he was correct the code responded correctly than he suggested that we must print all the objects and study them including req.files cloudinary response req.body than he added file deletion code in cloudinary code so files are no longer available on server when deleted .He also checks data on multiples levels on atlas,on postman response on cloudinary media explorer,then he tested again after deleting user that how code respond if we dont send optional coverImage but foud out we were tring to acces index 0 of coverImage which is optional which crashes when it is not provided then he wraps that code in if statement and then code starts working then he removes some extra console logs.After that he move towards properly configuring postman he firsly created collection with youtube chai name and added user folder in it and added the registerUser post request with all form-body then he talks about how we avoid writting http://localhost:8000/api/v1 which is common by introducing environment variables and linking them to our collection he currently used only one variable named server and tested again with variable and added another user to db and 