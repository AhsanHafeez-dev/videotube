User Router and Controller Setup
the video was introduction to controllers it does not goes into the details of logics of registration it just covers the syntax and convention part means it declare how controllers file will be created their naming convention how we will use custom asynchHandler function for controller we send dumy 200 response because we have not done logic part yet than we exported it and moves towards routers folder because somehow we need to tell our app to navigate our user to our function when he wants to register so we imported router from express and created a router in user router.js then we move to app.js imports our router with custom name (export default is neccessary) user router and use it as middleware in app but when using that wwe need to tell app which base routes will it handle in our case user route will hander users routes like regsiter delete login update etc so /user will be forwarded to user routes which will route to controller but in standard we typically have more verbose urls like we also starts with /api and we also use versioning in apis for tracking each features in version so route will become /api/v1 as it is first version of it and after that as currently we are talking about user routes we will also add /user so overall url will become /api/v1/users be carefull with your import statements because some time exetensions are also necccesarry once you are done with app setup now go ahead and define routes using router in user.routes.js first route would be of post type which will be handled by registerUser controller now run application by typing npm run dev in cmd and test route with postman see for errors this is not the proper controller we will write the proper logic of registering user next time
User Controller logic
the video starts with some discussion that controller is actually programming practices for problems solving and leet code or dsa is not the only source for learning logic building many students learn data structures and algorithims ,algorithim is just step by step process to solve a problems so either you learn it by using leetcode problems or by writting conntroller both are same purpose is same so we started by writting step by step algorithim for registering user the first step was to take all info(this depends upon specifc use case) ,validate all fields,check wether that user already exist or not take the avatar(profile) and coverImage from user and upload them on some third party cloud(cloudinary for us) if avatar is uploaded successfully make a db call to save the user and return tha user information to frontend for now we dont have frontend we will use postman (you can use thunderclient or axios as well) . so after brainstroming we started writting code and we first takes all text fields from req.body and print them on console and after that we see its even accepting the empty string so we introduce validation checks(for proper complicated checks creat a utility files with all validation i.e email,password etc checks) to accepts only valid fields we did it in both way tradiotional if way and by using .some method of javascript arrays incase of invalid fields we use our custom api error to send error back to frontend if all fields are valid then we make db query(remeber to use await) to check if this user exist in db or not for now we are checking for both unique values username and email in one call you can check for one or more than two depending upon the use case then we move towards image and realizes that we dont have files  by default in express so we need something which can accept and inject files in our req object so we already had multer middleware so go to user.routes.js and that upload of multer in our register user we uses upload.fields because we were accepting two files and we name them and describe we will only accepts one file against each fields now multer will inject files in our req object so we can use it in controller we came in controller and acces req.files and . name of file [0]index because we are only accepting one file against each fields and same goes for coverImage as avatar is compulsory we check that it should exist otherwise error is thrown after that call utility function to upload images to url and get response back again check wether avatar response is not null because its compulsory and throw error if found null after that make db creation call to save user to db and get response back than make another db query(completely option you can use reponse as well) and tell db that you dont want that encrypted password and empty refrehToken also make sures to send only avatar.url not whole avatar object and also provide option || "" for coverImage as it is not compulsory after all that is done and db give appropiate response if not throw error if yes return properly formatted response using custom ApiResponse class send 201 created code give user data and also success message and we will test controller next time.

How to Use Postman and testing register user controller
the video started with the discussion that whenever you are starting to test your code you should always have real world expectation that your code will fail and you will have erros because the real world algorithim involves much complexity and diverse aspect that you cannot get all things right in first go you will fix bugs in many iteration and that is where you learn and go from junior to senior software developer can write simple algorithims in one go but not the real world application then sir discussed one of the bug that one of viewer point out that sir has written ./env instead of ./.env in dotenv cofig in index.js then he moves towards the testing of register conntroller in first attempt he got error that field user with this username or email already exists then he analyze code and realized that he misses the await when checking for user existance he fix that and then tried again stating field fullName is required but the code failed again he spend some time looking for erro but he didnot get it actually he was missing l in fullName he was writting fulName instead of fullName and thats why it doesnot get match to code's variable fullName anyways he deletes the field and rewrite field again with correct spelling and this time he was correct the code responded correctly than he suggested that we must print all the objects and study them including req.files cloudinary response req.body than he added file deletion code in cloudinary code so files are no longer available on server when deleted .He also checks data on multiples levels on atlas,on postman response on cloudinary media explorer,then he tested again after deleting user that how code respond if we dont send optional coverImage but foud out we were tring to acces index 0 of coverImage which is optional which crashes when it is not provided then he wraps that code in if statement and then code starts working then he removes some extra console logs.After that he move towards properly configuring postman he firsly created collection with youtube chai name and added user folder in it and added the registerUser post request with all form-body then he talks about how we avoid writting http://localhost:8000/api/v1 which is common by introducing environment variables and linking them to our collection he currently used only one variable named server and tested again with variable and added another user to db and 

email/username password validate autheticate acces/refreshToken 
The video starts with the discussion that many students focus more on memorizing stuff rather than understanding the problem statement and soultion behind it so dont do that and try to understand the actual universe of the problem so you can be good problem solver without the need of tutorial  .After that discussion started about whats the main difference b/w access and refresh token sir stated that you dont need both some time people use only access token for functionality access token are genrally short lived as compare to refresh Token which are generally long lived ,access token is proof of authentication after access token expires you can use refresh token to generate new access and refresh token.After that sir started with login controller and firtsly wrote steps for login 1. get data(depends upon requirement you can do loginn with either usernmae or email) 2.validate data 3.authenticate user and password 4.if authenticated generate access/refresh token(we have already injected method for that in usermodel) send generated tokens via secure cookies and also throught response for mobile apps then we sir starts writting code for these steps he takes username,emai,password and checks wither one of them(name,email) is present after that get that user(based on $or operator of mongo for flexible code) if user not found throw error otherwise verify password(remeber to use injected method but always remeber those methods are avalable in documents not in mongoose object) after password verification create a utility function which can generate access and refreshToken and alos add that to db based on userId passed to it than use it with await as it requires db call after that   saved tokens in cookie(secure cookie which need options) than make another query to get updated user(without password ) and send that in reponse json .Response.json also include tokens for mobile app or local storage in sir tutorial sir almost used three db calls you can reduce it to 1 depending on expense of one db call.After that sir moves to logout controller and discuss its logic sir stated that think how would you go about logging out if you're thinking about clearing cookie you are absolutely right but partially because you also need to clear that refresh Token in db so we started with logout controller but the first problem is that which user will you logout because you are taking username/email in both login and register but you cannot do that here beccause in that case anyone can logout anyone based on email and thats also bad ux so we need to access user without asking that user so we realizes that we already haf tokens in cookies which has user info but that will only be available if user is login but logout is only possible if you are logged in so we created an auth middleware verifyjwt why not write in controller because that wont be reuseable and there will be many routes and controllers which required user to be logged in (i.e comment,like etc) so we write auth middleware which first checks the availablity of token in cookie or header(mobile apps Authroization header with bearer token)  if not present throw error otherwise verify it if not verifed throw error otherwise retriev id and make db call to get user and inject it in req object after that use it in user.routes.js before logout user as controller and in logout controller use req.user to clear db than clear cookie and now logout is done.
Access token and refresh token in Backend
the video started by pointing some erros in login and logout controller main error was the missing extension(.js) in auto import and incorrect use of ! and or in if condition sir also discusses how to go about discussing things and sir cannot show all debugging because it takes alot of time but you should be able to understand code and do debugging step by step then main topic of video started that whats the mechanism of access and refreshToken sir told that in earlier time we only had accessToken if that expires you login again but some companies like google suggested that we should also had some state(Session) in our db as well so we dont have to ask authorized user to login again and heres the concepts of refrehToken comes in when accessToken expires the fronend will hit an endpoint and if he is authorized we will provide him with new tokens and our purpose in video is to create that endpoint .steps involved 1.we first take the token from cookie or header or body 2.check if that exist if not throw error 3.check wether provided token has proper payload or not if not throw error 4. compare token with token saved in db if not matched throw error 5. if matched send 200 response with cookie of refrehToken and accessToken .why we are sending too much error instead of resposes? the fake 200 error is worst thing to happen in backend we are not crashing our app by throwing error it is also a error response but some time you need to really through error to infrom user that this is not well but you should use gracefull degradation as we are already all checks in controller we dont need to add midde ware to our routes but you can move your token logic to verify jwt and use that instead but that totally depends upon your logic.